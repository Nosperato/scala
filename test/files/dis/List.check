trait List[+a] extends scala.Seq[a] with scala.ScalaObject {
    def removeDuplicates: scala.List[a];
    def intersect[b >: a](scala.List[b]): scala.List[b];
    def diff[b >: a](scala.List[b]): scala.List[b];
    def union[b >: a](scala.List[b]): scala.List[b];
    def contains(scala.Any): scala.Boolean;
    def zip[b](scala.List[b]): scala.List[scala.Tuple2[a, b]];
    override def toString(): java.lang.String;
    def mkString(java.lang.String, java.lang.String, java.lang.String): java.lang.String;
    def reverse: scala.List[a];
    def flatMap[b](scala.Function1[a, scala.List[b]]): scala.List[b];
    def reduceRight[b >: a](scala.Function2[b, b, b]): b;
    def reduceLeft[b >: a](scala.Function2[b, b, b]): b;
    override def foldRight[b](b)(scala.Function2[a, b, b]): b;
    override def foldLeft[b](b)(scala.Function2[b, a, b]): b;
    override def find(scala.Function1[a, scala.Boolean]): scala.Option[a];
    override def exists(scala.Function1[a, scala.Boolean]): scala.Boolean;
    override def forall(scala.Function1[a, scala.Boolean]): scala.Boolean;
    def count(scala.Function1[a, scala.Boolean]): scala.Int;
    def sort(scala.Function2[a, a, scala.Boolean]): scala.List[a];
    def partition(scala.Function1[a, scala.Boolean]): scala.Tuple2[scala.List[a], scala.List[a]];
    def remove(scala.Function1[a, scala.Boolean]): scala.List[a];
    def filter(scala.Function1[a, scala.Boolean]): scala.List[a];
    override def foreach(scala.Function1[a, scala.Unit]): scala.Unit;
    def reverseMap[b](scala.Function1[a, b]): scala.List[b];
    def map[b](scala.Function1[a, b]): scala.List[b];
    def apply(scala.Int): a;
    def break(scala.Function1[a, scala.Boolean]): scala.Tuple2[scala.List[a], scala.List[a]];
    def span(scala.Function1[a, scala.Boolean]): scala.Tuple2[scala.List[a], scala.List[a]];
    def dropWhile(scala.Function1[a, scala.Boolean]): scala.List[a];
    def takeWhile(scala.Function1[a, scala.Boolean]): scala.List[a];
    def splitAt(scala.Int): scala.Tuple2[scala.List[a], scala.List[a]];
    def dropRight(scala.Int): scala.List[a];
    def takeRight(scala.Int): scala.List[a];
    def drop(scala.Int): scala.List[a];
    def take(scala.Int): scala.List[a];
    def last: a;
    def init: scala.List[a];
    def elements: scala.Iterator[a];
    def indices: scala.List[scala.Int];
    def length: scala.Int;
    def reverse_:::[b >: a](scala.List[b]): scala.List[b];
    def :::[b >: a](scala.List[b]): scala.List[b];
    def ::[b >: a](b): scala.List[b];
    def tail: scala.List[a];
    def head: a;
    def isEmpty: scala.Boolean
}
object List extends java.lang.Object with scala.ScalaObject {
    final def view[a <: scala.Ordered[a]](scala.Function1[a, scala.Ordered[a]])(scala.List[a]): scala.Ordered[scala.List[a]];
    final def toString(scala.List[scala.Char]): java.lang.String;
    final def fromString(java.lang.String): scala.List[scala.Char];
    final def fromString(java.lang.String, scala.Char): scala.List[java.lang.String];
    final def fromArray[a](scala.Array[a], scala.Int, scala.Int): scala.List[a];
    final def fromIterator[a](scala.Iterator[a]): scala.List[a];
    final def unzip[a, b](scala.List[scala.Tuple2[a, b]]): scala.Tuple2[scala.List[a], scala.List[b]];
    final def flatten[a](scala.List[scala.List[a]]): scala.List[a];
    final def tabulate[a](scala.Int, scala.Function1[scala.Int, a]): scala.List[a];
    final def make[a](scala.Int, a): scala.List[a];
    final def range(scala.Int, scala.Int): scala.List[scala.Int];
    final def apply[A](A*): scala.List[A]
}
