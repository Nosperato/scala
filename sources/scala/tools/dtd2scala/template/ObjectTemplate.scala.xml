<!-- $Id$ -->
<!DOCTYPE template [ 
  <!ENTITY elementName   '<string ref="elementName"/>'> 
  <!ENTITY qElementName  '<qstring ref="elementName"/>'> 
  <!ENTITY ccElementName '<ccstring ref="elementName"/>'> 
  <!ENTITY elementContentModel   '<string ref="elementContentModel"/>'> 
  <!ENTITY attributeName   '<string ref="attributeName"/>'> 
  <!ENTITY qAttributeName  '<qstring ref="attributeName"/>'> 
  <!ENTITY cAttributeName '<cstring ref="attributeName"/>'> 
  <!ENTITY space '<![CDATA[ ]]>'> 
  <!ENTITY br ''> 
]>
<!-- generalize to abstract syntax instead of concrete ? -->
<!-- the formatting should be done by a code beautifier -->
<template>
  /* this file is generated from a DTD using ObjectTemplate.scala.xml */
  <!-- package/ -->
  
  /** the following elements are bound
  <elementBinding>
    * &elementName; : &elementContentModel; {<attributeBinding>&attributeName;</attributeBinding>&space;}
  </elementBinding>
  **/
  
  object <string ref="objectName"/> {

    import scala.collection.Map;
    import scala.collection.immutable;
    import scala.collection.mutable;

    type cT = scala.Seq[scala.xml.Node];

    def error_InvalidChildren( elName:String, ch:cT, cM:String ) =
      error("trying to construct invalid "+elName+",\n children labels were: "
            +ch.elements.map( x => x.label ).toList.mkString("",",","")
            +"\n content model was "+cM);

    abstract class <string ref="objectName"/>Node$ extends scala.xml.Node {
      /** the namespace of this node */
      final val namespace: String = <qstring ref="namespace"/>;
    }

    def tagIterator(ch:Seq[scala.xml.Node]):Iterator[Int] = new Iterator[Int] {
      val it = ch.elements.buffered;
      def hasNext = { 
        while (it.hasNext &amp;&amp; it.head.typeTag$ &lt; 0) it.next; 
        it.hasNext
      }
      def next = {
        if( hasNext ) {
          val n = it.next;
          val i = n.typeTag$;
          if( i > 0 ) i else $tagMap.get( n.label ) match {
              case Some( j ) => j
              case _         => 0
            }
          
        } else {
          error("internal error");
        }
      }
    }
    private val $tagMap = new mutable.HashMap[String,Int];
    <elementBinding>
     $tagMap.update( &qElementName;, <makeTag/> );
    </elementBinding>
    <elementBinding>

     def constr_&ccElementName;( attrs:scala.xml.AttributeSeq, ch:cT ) = &ccElementName;(attrs,ch:_*);

     private val &ccElementName;AttribValidator = {
       import scala.xml.dtd._;
       new AttributeValidator(  
         <qstring ref="namespace"/>, <attributeDecls/>);
         }

     private val &ccElementName;Validator = {
       import scala.xml.dtd._;
       new ElementValidator(<qstring ref="namespace"/>, <elemDecl/>);
     }

     case class &ccElementName;( attrs:scala.xml.AttributeSeq, ch:scala.xml.Node* ) extends <string ref="objectName"/>Node$ {

     &ccElementName;Validator.validate( ch );

    final override def typeTag$ = <refTag/>;

     final def label = &qElementName;;
     final def child      =  ch;
     final def attributes = theAttrs; 

     val theAttrs = &ccElementName;AttribValidator.validate( attrs );

     
     /* attributes
     <!-- attributeBinding>
       
       <string ref="attributeDecl"/>
        final def &cAttributeName; : String = attribute(&qAttributeName;);
      </attributeBinding -->
      */

     /** returns a new &ccElementName; with updated attributes 
     final def %(attrs: Seq[Pair[String, String]]) = {
       var newmap = scala.xml.Node.NoAttributes;
       for( val p &lt;- attribute.elements ) { 
          newmap = newmap.update( p._1, p._2 )
       }
       for( val p &lt;- attrs ) { 
          newmap = newmap.update( p._1, p._2 )
       }
       &ccElementName;( newmap, child:_* ) ;
     }
  */
     /** returns a new &ccElementName; with updated attribute 
     final def %(attr: Pair[String, String])  = {
       var newmap = scala.xml.Node.NoAttributes;
       for( val p &lt;- attribute.elements ) { 
          newmap = newmap.update( p._1, p._2 );
       };
       newmap = newmap.update( attr._1, attr._2 );
       &ccElementName;( newmap, child:_* ) ;
     }
*/
    }
    </elementBinding>
    

    def load( filename:String ):scala.xml.Node = load( filename, <string ref="compressDefault"/> );

    def load( filename:String, _compress:boolean ):scala.xml.Node = {
      val fAdapter = new scala.xml.BindingFactoryAdapter  {
        val f = { 
          val res = new mutable.HashMap[String, (scala.xml.AttributeSeq,cT) => scala.xml.Node]() ;
          <elementBinding>
          res.update( &qElementName;, constr_&ccElementName;);</elementBinding>
          res;
        }

        val g = { 
          val res = new mutable.HashMap[String, boolean]() ;
          <elementBinding>
          res.update( &qElementName;, <string ref="elementContainsText"/>);</elementBinding>
          res;
        }
        val compress = _compress ; 
      };
      fAdapter.loadXML( new org.xml.sax.InputSource(filename) );
    };    
}
</template>
